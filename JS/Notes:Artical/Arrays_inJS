Types of Data in Javascript

Primitive Data Type
In primitive data type we store actual value of data (ex- String , number , boolean , undefined etc)

Non Primitive Data Type
Non Premitive Data type stores reference of actual value of data (ex- Arrays , object etc )

What is ARRAY

Arrays are non primitive data types which can store multiple data types in javascript

How to initialize an Array in JS

let arr = [1, 2, 3, 4, 5];
let arr = new Array(1,2,3,4,5);
let arr = new Array(5); → → Empty Array of length 5
Note - if we will pass single value then it will create array of that length
let arr = []; → Empty Array
let arr = new Array(); → Empty Array
Using Spread Operator
let arr1 = [1, 2, 3, 4, 5];
let arr2 = […arr1,5,6,7]; // arr2 = [11,2,3,4,5,5,6,7];
How to iterate an Array in JS

1. Using for loop

for(let i = 0 ; i < arr.length; i++){
console.log(arr[i]);
}

2. Using for...of Loop (ES6+)

for (const element of arr) {
console.log(element);
}

3. Using forEach() (Best for Iteration)

arr.forEach((element) =>
console.log(element)
);
arr.forEach((value, index) =>
console.log(`Index ${index}: ${value}`);
);

4. Using map() (Returns a New Array)

let arr = [1,2,3,4,5];

const arr2 = arr.map((element) =>
element *2
);

// arr2 becomes [2,4,6,8,10];

My favorite ARRAY Methods

Push(element) -> Add to element at End
Pop( )→ Remove from End
unshift(element) → Add to Start
shift() → Remove from Start
splice() → Add/Remove Elements at Specific Index
arr.splice(1, 1, "new"); // Remove 1 element at index 1, and insert "new"
indexOf() → Find Index of an Element
includes() → Check if Element Exists
find() → used to find first matching element
numbers.find(num => num > 25);
filter() → Get All Matching Elements
let filtered = numbers.filter(num => num > 25);
reduce() → Accumulate Values → let sum = numbers.reduce((total, num) => total + num, 0);
sort() → Sort Elements
reverse() → Reverse Elements
slice() → Extract a Portion
let part = [0, 1, 2, 3, 4].slice(1, 3); console.log(part); // [1, 2]
join() → Convert to String
split() → Convert String to Array
Conclusion

Arrays in JavaScript are flexible and powerful, allowing easy data storage and manipulation. With various methods like push(), pop(), map(), and filter(), they make handling data efficient. Mastering arrays helps in writing cleaner and more effective code!
